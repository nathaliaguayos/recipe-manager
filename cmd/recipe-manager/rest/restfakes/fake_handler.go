// Code generated by counterfeiter. DO NOT EDIT.
package restfakes

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/recipe-manager/cmd/recipe-manager/rest"
)

type FakeHandler struct {
	AddMealStub        func() func(ctx *gin.Context)
	addMealMutex       sync.RWMutex
	addMealArgsForCall []struct {
	}
	addMealReturns struct {
		result1 func(ctx *gin.Context)
	}
	addMealReturnsOnCall map[int]struct {
		result1 func(ctx *gin.Context)
	}
	GetMealsStub        func() func(ctx *gin.Context)
	getMealsMutex       sync.RWMutex
	getMealsArgsForCall []struct {
	}
	getMealsReturns struct {
		result1 func(ctx *gin.Context)
	}
	getMealsReturnsOnCall map[int]struct {
		result1 func(ctx *gin.Context)
	}
	HealthCheckStub        func() func(ctx *gin.Context)
	healthCheckMutex       sync.RWMutex
	healthCheckArgsForCall []struct {
	}
	healthCheckReturns struct {
		result1 func(ctx *gin.Context)
	}
	healthCheckReturnsOnCall map[int]struct {
		result1 func(ctx *gin.Context)
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) AddMeal() func(ctx *gin.Context) {
	fake.addMealMutex.Lock()
	ret, specificReturn := fake.addMealReturnsOnCall[len(fake.addMealArgsForCall)]
	fake.addMealArgsForCall = append(fake.addMealArgsForCall, struct {
	}{})
	stub := fake.AddMealStub
	fakeReturns := fake.addMealReturns
	fake.recordInvocation("AddMeal", []interface{}{})
	fake.addMealMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) AddMealCallCount() int {
	fake.addMealMutex.RLock()
	defer fake.addMealMutex.RUnlock()
	return len(fake.addMealArgsForCall)
}

func (fake *FakeHandler) AddMealCalls(stub func() func(ctx *gin.Context)) {
	fake.addMealMutex.Lock()
	defer fake.addMealMutex.Unlock()
	fake.AddMealStub = stub
}

func (fake *FakeHandler) AddMealReturns(result1 func(ctx *gin.Context)) {
	fake.addMealMutex.Lock()
	defer fake.addMealMutex.Unlock()
	fake.AddMealStub = nil
	fake.addMealReturns = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) AddMealReturnsOnCall(i int, result1 func(ctx *gin.Context)) {
	fake.addMealMutex.Lock()
	defer fake.addMealMutex.Unlock()
	fake.AddMealStub = nil
	if fake.addMealReturnsOnCall == nil {
		fake.addMealReturnsOnCall = make(map[int]struct {
			result1 func(ctx *gin.Context)
		})
	}
	fake.addMealReturnsOnCall[i] = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) GetMeals() func(ctx *gin.Context) {
	fake.getMealsMutex.Lock()
	ret, specificReturn := fake.getMealsReturnsOnCall[len(fake.getMealsArgsForCall)]
	fake.getMealsArgsForCall = append(fake.getMealsArgsForCall, struct {
	}{})
	stub := fake.GetMealsStub
	fakeReturns := fake.getMealsReturns
	fake.recordInvocation("GetMeals", []interface{}{})
	fake.getMealsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) GetMealsCallCount() int {
	fake.getMealsMutex.RLock()
	defer fake.getMealsMutex.RUnlock()
	return len(fake.getMealsArgsForCall)
}

func (fake *FakeHandler) GetMealsCalls(stub func() func(ctx *gin.Context)) {
	fake.getMealsMutex.Lock()
	defer fake.getMealsMutex.Unlock()
	fake.GetMealsStub = stub
}

func (fake *FakeHandler) GetMealsReturns(result1 func(ctx *gin.Context)) {
	fake.getMealsMutex.Lock()
	defer fake.getMealsMutex.Unlock()
	fake.GetMealsStub = nil
	fake.getMealsReturns = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) GetMealsReturnsOnCall(i int, result1 func(ctx *gin.Context)) {
	fake.getMealsMutex.Lock()
	defer fake.getMealsMutex.Unlock()
	fake.GetMealsStub = nil
	if fake.getMealsReturnsOnCall == nil {
		fake.getMealsReturnsOnCall = make(map[int]struct {
			result1 func(ctx *gin.Context)
		})
	}
	fake.getMealsReturnsOnCall[i] = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) HealthCheck() func(ctx *gin.Context) {
	fake.healthCheckMutex.Lock()
	ret, specificReturn := fake.healthCheckReturnsOnCall[len(fake.healthCheckArgsForCall)]
	fake.healthCheckArgsForCall = append(fake.healthCheckArgsForCall, struct {
	}{})
	stub := fake.HealthCheckStub
	fakeReturns := fake.healthCheckReturns
	fake.recordInvocation("HealthCheck", []interface{}{})
	fake.healthCheckMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) HealthCheckCallCount() int {
	fake.healthCheckMutex.RLock()
	defer fake.healthCheckMutex.RUnlock()
	return len(fake.healthCheckArgsForCall)
}

func (fake *FakeHandler) HealthCheckCalls(stub func() func(ctx *gin.Context)) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = stub
}

func (fake *FakeHandler) HealthCheckReturns(result1 func(ctx *gin.Context)) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = nil
	fake.healthCheckReturns = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) HealthCheckReturnsOnCall(i int, result1 func(ctx *gin.Context)) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = nil
	if fake.healthCheckReturnsOnCall == nil {
		fake.healthCheckReturnsOnCall = make(map[int]struct {
			result1 func(ctx *gin.Context)
		})
	}
	fake.healthCheckReturnsOnCall[i] = struct {
		result1 func(ctx *gin.Context)
	}{result1}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMealMutex.RLock()
	defer fake.addMealMutex.RUnlock()
	fake.getMealsMutex.RLock()
	defer fake.getMealsMutex.RUnlock()
	fake.healthCheckMutex.RLock()
	defer fake.healthCheckMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rest.Handler = new(FakeHandler)
